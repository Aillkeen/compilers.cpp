/**
 * Syntax Specification
 *
 * Contributors:
 *      Jeanderson Barros Canido - http://jeandersonbc.github.io
 *      Thiago Ferreira
 */
package compiler.generated;

/**
 * Terminals without associated type
 */
terminal SEMICOLON, NAMESPACE, INLINE, LBRK, RBRK, USING, ASSIGNMENT, LSQRBRK, RSQRBRK;
terminal LPAR, RPAR, ALIGNAS, DOTS, CLASS, STRUCT, UNION, FINAL, EXPLICIT;

/**
 * Terminals with types associated
 */
terminal java.lang.String IDENTIFIER;

/**
 * Non terminal symbols
 */
non terminal translationUnit, blockDeclaration, originalNamespaceDef, aliasDeclaration;
non terminal declarationSeqOpt, declarationSeq, declaration, emptyDeclaration, typeId;
non terminal namespaceDefinition, namespaceDefinition2, unnamedNamespaceDef, inlineOpt;
non terminal typeSpecifierSeq, abstractDeclaratorOpt, abstractDeclarator, typeSpecifier;
non terminal attributeSpecifier, attributeList, alignmentSpecifier, dotsOpt, classHead;
non terminal typeSpecifierSeq2, attributeSpecifierSeqOpt, attributeSpecifierSeq;
non terminal trailingTypeSpecifier, classSpecifier, enumSpecifier, memberSpecificationOpt;
non terminal memberSpecification, classKey, classHead2, classHeadName, baseClauseOpt;
non terminal classVirtSpecifierSeqOpt, classVirtSpecifierSeq, baseClause,
non terminal classVirtSpecifier;

/**
 * The Grammar Specification
 *
 * See "README.md" on "http://github.com/jeandersonbc/compilers.cpp"
 * for further information.
 */
start with translationUnit;

translationUnit ::= declarationSeqOpt;

declarationSeqOpt ::= declarationSeq | ;

declarationSeq ::= declaration
    |   declarationSeq declaration
    ;

/**
 * Declaration Types
 */
declaration ::= emptyDeclaration
    |   blockDeclaration
    |   namespaceDefinition
    ;

/**
 * Block Declaration
 */
blockDeclaration ::= aliasDeclaration;

/**
 * Alias Declaration
 */
aliasDeclaration ::= USING IDENTIFIER ASSIGNMENT typeId SEMICOLON;

typeId ::= typeSpecifierSeq abstractDeclaratorOpt;

/* abstractDeclarator NOT IMPLEMENTED */
abstractDeclaratorOpt ::= abstractDeclarator | ;

typeSpecifierSeq ::= typeSpecifier typeSpecifierSeq2;
typeSpecifierSeq2 ::= attributeSpecifierSeqOpt
    |   typeSpecifierSeq
    ;

/* trailingTypeSpecifier NOT IMPLEMENTED
 * enumSpecifier NOT IMPLEMENTED
 */
typeSpecifier ::= trailingTypeSpecifier
    |   classSpecifier
    |   enumSpecifier
    ;

classSpecifier ::= classHead LBRK memberSpecificationOpt RBRK;

/* memberSpecification NOT IMPLEMENTED */
memberSpecificationOpt ::= memberSpecification | ;

/* classHeadName NOT IMPLEMENTED */
classHead ::= classKey attributeSpecifierSeqOpt classHead2;
classHead2 ::= classHeadName classVirtSpecifierSeqOpt baseClauseOpt
    |   baseClauseOpt
    ;

classKey ::= CLASS | STRUCT | UNION;

classVirtSpecifierSeqOpt ::= classVirtSpecifierSeq | ;

classVirtSpecifierSeq ::= classVirtSpecifier
    |   classVirtSpecifierSeq classVirtSpecifier
    ;

classVirtSpecifier ::= FINAL | EXPLICIT;

/* baseClause NOT IMPLEMENTED */
baseClauseOpt ::= baseClause | ;

attributeSpecifierSeqOpt ::= attributeSpecifierSeq | ;

attributeSpecifierSeq ::= attributeSpecifier
    |   attributeSpecifierSeq attributeSpecifier
    ;

/* attributeList NOT IMPLEMENTED */
attributeSpecifier ::= LSQRBRK LSQRBRK attributeList RSQRBRK RSQRBRK
    |   alignmentSpecifier
    ;

/* ISSUE #2 - rule "alignment-expression" not defined in the grammar ref */
alignmentSpecifier ::= ALIGNAS LPAR typeId dotsOpt RPAR;

/**
 * Empty Declaration
 */
emptyDeclaration ::= SEMICOLON;

/**
 * Namespace Definition
 */
namespaceDefinition ::= inlineOpt NAMESPACE namespaceDefinition2;
namespaceDefinition2 ::= unnamedNamespaceDef
    |   originalNamespaceDef
    ;

unnamedNamespaceDef ::= LBRK declarationSeqOpt RBRK;
originalNamespaceDef ::= IDENTIFIER LBRK declarationSeqOpt RBRK;

inlineOpt ::= INLINE | ;
dotsOpt ::= DOTS | ;
